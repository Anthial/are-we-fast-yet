(* Copyright (c) 2001-2016 see AUTHORS.md file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

Simplified version of Kernel and Collection modules to suite the rules of
   the 'Core' language. *)
class Core with: kernel = (
| private Array = kernel Array.
  private initialSize = 10.
|
)(
  public class Pair withKey: aKey andValue: aValue = (
  | public key   ::= aKey.
    public value ::= aValue.
  |)()

  public class Vector new: size = (
  | private firstIdx ::= 1.
    private lastIdx  ::= 1.
    private storage  ::= Array new: size.
  |) (
    public at: index = (
      ^ storage at: index
    )
    
    public append: element = (
      (lastIdx > storage size) ifTrue: [
        (* Need to expand capacity first *)
        | newStorage |
        newStorage := Array new: 2 * storage size.
        storage doIndexes: [ :i | newStorage at: i put: (storage at: i) ].
        storage := newStorage. ].
      
      storage at: lastIdx put: element.
      lastIdx := lastIdx + 1.
      ^ self
    )
    
    public isEmpty  = ( ^ lastIdx = firstIdx )
    
    public forEach: block = (
      firstIdx to: lastIdx - 1 do: [ :i | block value: (storage at: i) ]
    )
    
    public hasSome: block = (
      firstIdx to: lastIdx - 1 do: [ :i |
        (block value: (storage at: i))
          ifTrue: [ ^ true ] ].
      ^ false
    )

    public contains: val = (
      firstIdx to: lastIdx - 1 do: [ :i |
        (val == (storage at: i))
          ifTrue: [ ^ true ] ].
      ^ false
    )
    
    public getOne: block = (
      firstIdx to: lastIdx - 1 do: [ :i |
        | e |
        e := storage at: i.
        (block value: e)
          ifTrue: [ ^ e ] ].
      ^ nil
    )
    
    public removeFirst = (
      isEmpty ifTrue:  [ ^ nil ].

      firstIdx := firstIdx + 1.
      ^ storage at: firstIdx - 1
    )
    
    public removeAll = (
      firstIdx := 1.
      lastIdx  := 1.
      storage  := Array new: storage size
    )

    public remove: object = (
      | newArray newLast found |
      newArray := Array new: self capacity.
      newLast := 1.
      found := false.
     
      self forEach: [ :it |
        it == object
          ifTrue:  [ found := true ]
          ifFalse: [
            newArray at: newLast put: it.
            newLast := newLast + 1. ] ].
     
      storage := newArray.
      lastIdx := newLast.
      firstIdx := 1.
      ^ found
    )
    
    public size     = ( ^ lastIdx - firstIdx   )
    public capacity = ( ^ storage size )
    
    public sort: aBlock = (
      (* Make the argument, aBlock, be the criterion for ordering elements of
         the receiver.
         sortBlocks with side effects may not work right *)
      self size > 0 ifTrue: [
        self sort: firstIdx
               to: lastIdx - 1
             with: aBlock ]
    )
    
    private sort: i to: j with: sortBlock = (
      (* Sort elements i through j of self to be non-descending according to
         sortBlock. *)
      | di dij dj tt ij k l n |
      sortBlock isNil ifTrue: [ ^ self defaultSort: i to: j ].
      
      (* The prefix d means the data at that index. *)
      (n := j + 1  - i) <= 1 ifTrue: [ ^ self ]. (* Nothing to sort. *)
      (* Sort di,dj. *)
      di := storage at: i.
      dj := storage at: j.
      
      (* i.e., should di precede dj? *)
      (sortBlock value: di with: dj) ifFalse: [
        storage swap: i with: j.
        tt := di.
        di := dj.
        dj := tt
      ].

      n > 2 ifTrue: [ (* More than two elements. *)
        ij := (i + j) / 2.  (* ij is the midpoint of i and j. *)
        dij := storage at: ij.  (* Sort di,dij,dj.  Make dij be their median. *)
        (sortBlock value: di with: dij)
          ifTrue: [ (* i.e. should di precede dij? *)
            (sortBlock value: dij with: dj) ifFalse: [ (* i.e., should dij precede dj? *)
              storage swap: j with: ij.
              dij := dj]]
          ifFalse: [ (* i.e. di should come after dij *)
            storage swap: i with: ij.
            dij := di].
        
        n > 3 ifTrue: [
          (* More than three elements.
             Find k>i and l<j such that dk,dij,dl are in reverse order.
             Swap k and l.  Repeat this procedure until k and l pass each other. *)
          k := i.
          l := j.
          [ [l := l - 1.  k <= l and: [sortBlock value: dij with: (storage at: l)]]
              whileTrue.  (* i.e. while dl succeeds dij *)
            [k := k + 1.  k <= l and: [sortBlock value: (storage at: k) with: dij]]
              whileTrue.  (* i.e. while dij succeeds dk *)
            k <= l]
              whileTrue:
                [ storage swap: k with: l ].

          (* Now l<k (either 1 or 2 less), and di through dl are all less than or equal to dk
             through dj.  Sort those two segments. *)
          self sort: i to: l with: sortBlock.
          self sort: k to: j with: sortBlock
        ]
      ]
    )
  ) : (
    public new = ( ^ self new: 50 )
  
    public with: elem = (
      | newVector |
      newVector := self new: 1.
      newVector append: elem.
      ^ newVector
    )
  )
  
  public class Set new: size = (
  | private items ::= Vector new: size. |
  )(
    public forEach: block = ( items forEach: block )
    
    public hasSome: block = ( ^ items hasSome: block )
    
    public getOne: block = ( ^ items getOne: block )
    
    public add: anObject = (
      (self contains: anObject)
        ifFalse: [ items append: anObject ]
    )
    
    public collect: block = ( | coll |
      coll := Vector new.
      self forEach: [ :e | coll append: (block value: e) ].
      ^ coll
    )
    
    public contains: anObject = (
      ^ self hasSome: [ :it | it = anObject ]
    )
    
    public size = ( ^ items size )
    public removeAll = ( ^ items removeAll )
  ) : (
    public new = ( ^ self new: initialSize )
  )
  
  public class IdentitySet new: size = Set new: size ()(
    public contains: anObject = (
      ^ self hasSome: [ :it | it == anObject ]
    )
  ) : (
    public new = ( ^ self new: initialSize )
  )
  
  public class Dictionary new: size = (
  | protected pairs = IdentitySet new: size. |
  )(
    public at: aKey put: aValue = (
      | pair |
      pair := self pairAt: aKey.
      pair isNil
        ifTrue:  [ pairs add: (Pair withKey: aKey andValue: aValue) ]
        ifFalse: [ pair value: aValue ]
    )
    
    public at: aKey = (
      | pair |
      pair := self pairAt: aKey.
      ^ pair isNil
        ifTrue:  [ nil ]
        ifFalse: [ pair value ]
    )

    public containsKey: aKey = (
      | pair |
      pair := self pairAt: aKey.
      ^ pair notNil
    )
    
    public size = ( ^ pairs size )
    public removeAll = ( ^ pairs removeAll )
    
    protected pairAt: aKey = (
      ^ pairs getOne: [ :p | p key = aKey ]
    )
    
    public keys = ( ^ pairs collect: [ :p | p key ] )
    public values = ( ^ pairs collect: [ :p | p value ] )
  ) : (
    public new = ( ^ self new: initialSize )
  )
  
  public class IdentityDictionary new: size = Dictionary new: size ()(
    protected pairAt: aKey = (
      ^ pairs getOne: [ :p | p key == aKey ]
    )
  ) : (
    public new = ( ^ self new: initialSize )
  )
)
