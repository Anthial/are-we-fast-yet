# -*- mode: yaml -*-
# Config file for ReBench
standard_experiment: all
standard_data_file: 'perf-overview.data'

statistics:
    confidence_level: 0.95

runs:
    number_of_data_points: 10

quick_runs:
    number_of_data_points: 3
    max_time: 60   # time in seconds

# definition of benchmark suites
benchmark_suites:
    macro-steady-som:
        gauge_adapter: RebenchLog
        command: " -cp Smalltalk:Examples/Benchmarks/Richards:Examples/Benchmarks/Json:Examples/Benchmarks/GraphSearch:Examples/Benchmarks/Json:Examples/Benchmarks/DeltaBlue:Examples/Benchmarks/NBody Examples/Benchmarks/BenchmarkHarness.som  %(benchmark)s 1000 0 "
        max_runtime: 60000
        benchmarks: &SOM_JIT
            - DeltaBlue:
                extra_args: 20000
            - Mandelbrot:
                extra_args: 1200
            - Richards:
                extra_args: 100
            - NBody:
                extra_args: 800000
            - Json:
                extra_args: 120
            - GraphSearch:
                extra_args: 30
            - PageRank:
                extra_args: 2500
            
            - Fannkuch:
                extra_args: 10
            - Bounce:
                extra_args: 10000
            - Permute:
                extra_args: 5000
            - Queens:
                extra_args: 3000
            - Sieve:
                extra_args: 8000
            - Storage:
                extra_args: 2000
            - Towers:
                extra_args: 2000

    macro-steady-som-sort:
        gauge_adapter: RebenchLog
        command: " -cp Smalltalk Examples/Benchmarks/BenchmarkHarness.som  %(benchmark)s 1000 0 "
        max_runtime: 60000
        benchmarks: &SOM_JIT_SORT
            - BubbleSort:
                extra_args: 3000
            - QuickSort:
                extra_args: 3000
            - TreeSort:
                extra_args: 3000

    macro-steady-somns:
        gauge_adapter: RebenchLog
        command: " core-lib/Benchmarks/Harness.som %(benchmark)s 1000 0 "
        max_runtime: 60000
        benchmarks: *SOM_JIT
    macro-steady-somns-sort:
        gauge_adapter: RebenchLog
        command: " core-lib/Benchmarks/Harness.som Sort.%(benchmark)s 1000 0 "
        max_runtime: 60000
        benchmarks: *SOM_JIT_SORT

    macro-steady-som-interp:
        gauge_adapter: RebenchLog
        command: " -cp Smalltalk:Examples/Benchmarks/Richards:Examples/Benchmarks/DeltaBlue:Examples/Benchmarks/NBody Examples/Benchmarks/BenchmarkHarness.som  %(benchmark)s "
        max_runtime: 60000
        benchmarks: &SOM_INTERP
            - DeltaBlue:
                extra_args: "200 0 600"
            - Fannkuch:
                extra_args: "200 0 7"
            - Mandelbrot:
                extra_args: "200 0 80"
            - Richards:
                extra_args: "200 0 1"
            - NBody:
                extra_args: "200 0 2500"

            - Bounce:
                extra_args: "200 0 40"
            - BubbleSort:
                extra_args: "200 0 60"
            - List:
                extra_args: "200 0 30"
            - Permute:
                extra_args: "200 0 40"
            - Queens:
                extra_args: "200 0 30"
            - QuickSort:
                extra_args: "200 0 500"
            - Sieve:
                extra_args: "200 0 100"
            - Storage:
                extra_args: "200 0 400"
            - Towers:
                extra_args: "200 0 200"
            - TreeSort:
                extra_args: "200 0 30"

            #- IntegerLoop:
            #    extra_args: "200 0 8"
            #- FieldLoop:
            #    extra_args: "200 0 3"
            #- WhileLoop:
            #    extra_args: "200 0 30"
            
    macro-startup:
        gauge_adapter: RebenchLog
        command: " -cp Smalltalk:Examples/Benchmarks/Richards:Examples/Benchmarks/DeltaBlue Examples/Benchmarks/BenchmarkHarness.som  %(benchmark)s "
        max_runtime: 60000
        benchmarks:
            - DeltaBlue:
                extra_args: "1 0 6000"
            - Fannkuch:
                extra_args: "1 0 8"
            - Mandelbrot:
                extra_args: "1 0 500"
            - Richards:
                extra_args: "1 0 100"

    macro-steady-java:
        gauge_adapter: RebenchLog
        command: " -cp classic-benchmarks/classic-benchmarks.jar som.%(benchmark)s 1000 0"
        max_runtime: 60000
        benchmarks: *SOM_JIT
    macro-steady-java-sort:
        gauge_adapter: RebenchLog
        command: " -cp classic-benchmarks/classic-benchmarks.jar som.%(benchmark)s 1000 0"
        max_runtime: 60000
        benchmarks: *SOM_JIT_SORT


    macro-steady-java-interp:
        gauge_adapter: RebenchLog
        command: " -cp classic-benchmarks/classic-benchmarks.jar som.%(benchmark)s "
        max_runtime: 60000
        benchmarks: *SOM_INTERP


    macro-steady-lua:
        gauge_adapter: RebenchLog
        location: implementations/classic-benchmarks/benchmarks
        command: " %(benchmark)s "
        max_runtime: 600
        benchmarks:
            - DeltaBlue:
                command: deltablue.lua
                extra_args: "15 0 6000"
                warmup: 5
            - Fannkuch:
                command: fannkuchredux.lua
                extra_args: "20 0 8"
                warmup: 10
            - Mandelbrot:
                command: mandelbrot.lua
                extra_args: "20 0 500"
                warmup: 10
            - Richards:
                command: richards.lua
                extra_args: "14 0 100"
                warmup: 4
    macro-steady-lua-interp:
        gauge_adapter: RebenchLog
        location: implementations/classic-benchmarks/benchmarks
        command: " %(benchmark)s "
        max_runtime: 600
        benchmarks:
            - DeltaBlue:
                command: deltablue.lua
                extra_args: "10 0 6000"
            - Fannkuch:
                command: fannkuchredux.lua
                extra_args: "10 0 8"
            - Mandelbrot:
                command: mandelbrot.lua
                extra_args: "10 0 500"
            - Richards:
                command: richards.lua
                extra_args: "10 0 100"

    macro-steady-C:
        gauge_adapter: RebenchLog
        location: implementations/classic-benchmarks
        command: " %(benchmark)s "
        max_runtime: 600
        benchmarks:
            - DeltaBlue:
                command:    ./deltablue-c
                extra_args: "20 0 6000"
                warmup: 10
            - Fannkuch:
                command:    ./fannkuch-c
                extra_args: "20 0 8"
                warmup: 10
            - Mandelbrot:
                command:    ./mandelbrot-c
                extra_args: "20 0 500"
                warmup: 10
            - Richards:
                command:    ./richards-c
                extra_args: "20 0 100"
                warmup: 10

    macro-steady-pypy:
        gauge_adapter: RebenchLog
        location: implementations/classic-benchmarks/benchmarks/
        command: " %(benchmark)s "
        max_runtime: 600
        benchmarks:
            - DeltaBlue:
                command:    deltablue.py
                extra_args: "15 0 6000"
                warmup: 5
            - Fannkuch:
                command:    fannkuchredux.py
                extra_args: "20 0 8"
                warmup: 10
            - Mandelbrot:
                command:    mandelbrot.py
                extra_args: "20 0 500"
                warmup: 10
            - Richards:
                command:    richards.py
                extra_args: "20 0 100"
                warmup: 10
    macro-steady-ruby:
        gauge_adapter: RebenchLog
        location: implementations/classic-benchmarks/benchmarks/
        command: " %(benchmark)s "
        max_runtime: 600
        benchmarks:
            - DeltaBlue:
                command:    deltablue.rb
                extra_args: "25 0 6000"
                warmup: 15
            - Fannkuch:
                command:    fannkuch-redux.rb
                extra_args: "20 0 8"
                warmup: 10
            - Mandelbrot:
                command:    mandelbrot.rb
                extra_args: "20 0 500"
                warmup: 10
            - Richards:
                command:    richards.rb
                extra_args: "30 0 100"
                warmup: 20

# VMs have a name and are specified by a path and the binary to be executed
virtual_machines:
    Java7:
        path: implementations/
        binary: java7.sh
        args: -server
    Java7-interp:
        path: implementations/
        binary: java7.sh
        args: -Xint
    Java8:
        path: implementations/
        binary: java8.sh
        args: -server
    Java8-interp:
        path: implementations/
        binary: java8.sh
        args: -Xint
    Graal:
        path: implementations/
        binary: graal.sh
    PyPy:
        path: /usr/bin/
        binary: env
        args: "pypy"
    TruffleSOM-interp:
        path: implementations/TruffleSOM/
        binary: som.sh
    TruffleSOM-graal:
        path: implementations/TruffleSOM/
        binary: ../graal.sh
        args: "-G:-TraceTruffleInlining -G:-TraceTruffleCompilation -Xbootclasspath/a:build/classes:libs/truffle/build/truffle-api.jar som.vm.Universe"
    TruffleSOM-graal-no-split:
        path: implementations/TruffleSOM/
        binary: ../graal.sh
        args: "-G:-TraceTruffleInlining -G:-TraceTruffleCompilation -G:-TruffleSplittingEnabled -Xbootclasspath/a:build/classes:libs/truffle/build/truffle-api.jar som.vm.Universe"
    RTruffleSOM-interp:
        path: implementations/RTruffleSOM
        binary: RTruffleSOM-no-jit
    RTruffleSOM-jit:
        path: implementations/RTruffleSOM
        binary: RTruffleSOM-jit
    RPySOM-jit:
        path: implementations/RPySOM/
        binary: RPySOM-jit
    RPySOM-interp:
        path: implementations/RPySOM/
        binary: RPySOM-no-jit
    SOM++-interp:
        path: implementations/SOMpp
        binary: som.sh
    SOM-interp:
        path: implementations/SOM
        binary: som.sh
    SOMns-jit:
        path: implementations/SOMns
        binary: fast
    CogVM:
        path: .
        binary: pharo.sh
    C:
        path: implementations/
        binary: c.sh
    JRubyTruffle:
        path: implementations/
        binary: jruby.sh
    JRubyTruffle-no-split:
        path: implementations/
        binary: jruby-no-split.sh
    LuaJIT:
        path: implementations/luajit/src
        binary: luajit
    LuaJIT-interp:
        path: implementations/luajit/src
        binary: luajit
        args: -j off

experiments:
    C:
        actions:    benchmark
        benchmark:  macro-steady-C
        executions: C
    Java:
        data_file: data/java.data
        actions:    benchmark
        benchmark:
            - macro-steady-java
            - macro-steady-java-sort
        executions:
            #- Java7
            - Java8
            - Graal
    Java-interp:
        benchmark:  macro-steady-java-interp
        executions:
    #        - Java7-interp
            - Java8-interp
    JRuby:
        benchmark: macro-steady-ruby
        executions:
            - JRubyTruffle
            - JRubyTruffle-no-split
    LuaJIT:
       benchmark:  macro-steady-lua
       executions: LuaJIT
    LuaJIT-interp:
       benchmark:  macro-steady-lua-interp
       executions: LuaJIT-interp
    # CogVM:
    #     actions: benchmark
    #     benchmark: macro-steady-cogvm
    #     executions: CogVM
    PyPy:
        benchmark:  macro-steady-pypy
        executions: PyPy
    SOM-jit:
        data_file: data/som.data
        description: Benchmarks on SOM implementations
        benchmark:
            - macro-steady-som
            - macro-steady-som-sort
        executions:
            - TruffleSOM-graal
            - RTruffleSOM-jit
    SOMns-jit:
        data_file: data/somns.data
        description: Benchmarks on SOMns implementations
        benchmark:
            - macro-steady-somns
            - macro-steady-somns-sort
        executions:
            - SOMns-jit
    SOM-interp:
        benchmark: macro-steady-som-interp
        executions:
            - TruffleSOM-interp
            - RTruffleSOM-interp
            - RPySOM-interp
            - SOM-interp
    SOM-startup:
         benchmark: macro-startup
         executions:
             - SOM++-interp

