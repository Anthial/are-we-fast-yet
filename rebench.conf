# -*- mode: yaml -*-
# Config file for ReBench
standard_experiment: all
standard_data_file: 'benchmark.data'

statistics:
    confidence_level: 0.95

runs:
    number_of_data_points: 10

quick_runs:
    number_of_data_points: 3
    max_time: 60   # time in seconds

# definition of benchmark suites
benchmark_suites:
    steady-som:
        gauge_adapter: RebenchLog
        command: " -cp Smalltalk:../../benchmarks/SOM/DeltaBlue ../../benchmarks/SOM/BenchmarkHarness.som  %(benchmark)s 1000 "
        max_runtime: 6000
        benchmarks: &BENCHMARKS
            - DeltaBlue:
                extra_args: 12000
            - Richards:
                extra_args: 100
            
            - Bounce:
                extra_args: 1500
            - List:
                extra_args: 1500
            - Mandelbrot:
                extra_args: 500
            - NBody:
                extra_args: 250000
            - Permute:
                extra_args: 1000
            - Queens:
                extra_args: 1000
    steady-somns:
        gauge_adapter: RebenchLog
        command: " Harness.som %(benchmark)s 1000 "
        location: benchmarks/SOMns
        max_runtime: 6000
        benchmarks: *BENCHMARKS

    steady-java:
        gauge_adapter: RebenchLog
        command: " -cp ../benchmarks/Java/benchmarks.jar Harness %(benchmark)s 1000 "
        max_runtime: 6000
        benchmarks: *BENCHMARKS

    steady-ruby:
        gauge_adapter: RebenchLog
        location: benchmarks/Ruby
        command: "harness.rb %(benchmark)s 1000 "
        max_runtime: 6000
        benchmarks: *BENCHMARKS

    ruby-interp:
        gauge_adapter: RebenchLog
        location: benchmarks/Ruby
        command: "harness.rb %(benchmark)s 50 "
        max_runtime: 6000
        benchmarks: *BENCHMARKS
    
    ruby-indy:
        gauge_adapter: RebenchLog
        location: benchmarks/Ruby
        command: "harness.rb %(benchmark)s 170 "
        max_runtime: 6000
        benchmarks: *BENCHMARKS
    
    steady-js:
        gauge_adapter: RebenchLog
        location: benchmarks/JavaScript
        command: "harness.js %(benchmark)s 1000 "
        max_runtime: 6000
        benchmarks: *BENCHMARKS
    
    steady-v8:
        gauge_adapter: RebenchLog
        location: benchmarks/JavaScript
        command: "harness.js %(benchmark)s 1000 "
        max_runtime: 6000
        benchmarks:
            - DeltaBlueV8:
                extra_args: 12000
        

# TODO: JS, C, C++

# VMs have a name and are specified by a path and the binary to be executed
virtual_machines:
    # JVMs
    GraalBasic:
        path: implementations/
        description: A JVM with Graal, and Graal as top-tier compiler
        binary: graal.sh
    GraalC2:
        path: implementations/
        description: A JVM with Graal, but C2 as top-tier compiler
        binary: graal-c2.sh
    GraalEnterprise:
        path: implementations/
        binary: graal-enterprise.sh
    Java8U66:
        path: implementations/
        binary: java8.sh

    # SOM VMs
    TruffleSOM:
        path: implementations/TruffleSOM/
        binary: ../TruffleSOM.sh
        args: "-vv "
    SOMns:
        path: implementations/
        binary: SOMns.sh
    SOMns-Enterprise:
        path: implementations/
        binary: SOMns-e.sh

    # Ruby VMs
    JRubyTruffle:
        path: implementations/
        binary: jruby-truffle.sh
    JRubyTruffleMaster07:
        path: implementations/
        binary: jruby-truffle-master.sh
    JRubyTruffleEnterprise:
        path: implementations/
        binary: jruby-truffle-e.sh
    JRubyC2:
        path: implementations/
        binary: jruby.sh
    JRubyJ8:
        path: implementations/
        binary: jruby-j8.sh
    JRubyGraal:
        description: JRuby, without Truffle, running with a JVM that uses Graal as top-tier compiler
        path: implementations/
        binary: jruby-graal.sh
    MRI22:
        path: implementations/
        binary: mri-22.sh

    # JavaScript VMs
    Node:
        path: implementations/
        binary: node.sh
    GraalJS:
        path: implementations/
        binary: graaljs.sh
    Nashorn:
        path: implementations/
        binary: nashorn.sh

    # Other systems
    C:
        path: implementations/
        binary: c.sh
# TODO: C, C++

experiments:
    steady-java:
        description: Measure steady state performance
        benchmark: steady-java
        executions:
            - GraalC2
            - GraalBasic
            - GraalEnterprise
            - Java8U66
    steady-som:
        executions:
            - SOMns:
                benchmark: steady-somns
            - SOMns-Enterprise:
                benchmark: steady-somns
            # - TruffleSOM:
            #     benchmark: steady-som
    steady-ruby:
        benchmark: steady-ruby
        executions:
            - JRubyTruffle
            - JRubyTruffleEnterprise
            - JRubyTruffleMaster07
    steady-js:
        benchmark:
            - steady-js
            - steady-v8
        executions:
            - Node
            - GraalJS
            # - Nashorn
    ruby-others:
        executions:
            - MRI22:
                benchmark: ruby-interp
            - JRubyGraal:
                benchmark: ruby-indy
            - JRubyC2:
                benchmark: ruby-indy
            - JRubyJ8:
                benchmark: ruby-indy
