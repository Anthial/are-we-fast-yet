# -*- mode: yaml -*-
# Config file for ReBench
standard_experiment: all
standard_data_file: 'benchmark.data'

statistics:
    confidence_level: 0.95

runs:
    number_of_data_points: 10

quick_runs:
    number_of_data_points: 3
    max_time: 60   # time in seconds

# definition of benchmark suites
benchmark_suites:
    steady-som:
        gauge_adapter: RebenchLog
        command: " -cp Smalltalk:../../benchmarks/SOM/DeltaBlue ../../benchmarks/SOM/BenchmarkHarness.som  %(benchmark)s 1000 "
        max_runtime: 600
        benchmarks: &BENCHMARKS
            - DeltaBlue:
                extra_args: 12000
            - Mandelbrot:
                extra_args: 500

    steady-somns:
        gauge_adapter: RebenchLog
        command: " ../../benchmarks/SOMns/Harness.som %(benchmark)s 1000 "
        max_runtime: 600
        benchmarks: *BENCHMARKS

    steady-java:
        gauge_adapter: RebenchLog
        command: " -cp classic-benchmarks/classic-benchmarks.jar som.%(benchmark)s 1000 "
        max_runtime: 600
        benchmarks: *BENCHMARKS

    steady-ruby:
        gauge_adapter: RebenchLog
        location: benchmarks/Ruby
        command: "harness.rb %(benchmark)s 1000 "
        max_runtime: 600
        benchmarks: *BENCHMARKS
    
    steady-js:
        gauge_adapter: RebenchLog
        location: benchmarks/JavaScript
        command: "harness.js %(benchmark)s 10 0 "
        max_runtime: 600
        benchmarks: *BENCHMARKS
        

# TODO: JS, C, C++

# VMs have a name and are specified by a path and the binary to be executed
virtual_machines:
    # JVMs
    Java7:
        path: implementations/
        binary: java7.sh
        args: -server
    Java8:
        path: implementations/
        binary: java8.sh
        args: -server
    GraalBasic:
        path: implementations/
        binary: graal.sh
    GraalEnterprise:
        path: implementations/
        binary: graal-enterprise.sh

    # SOM VMs
    TruffleSOM:
        path: implementations/TruffleSOM/
        binary: som
        args: "-vv "
    SOMns:
        path: implementations/SOMns
        binary: fast

    # Ruby VMs
    JRubyTruffle:
        path: implementations/
        binary: jruby-truffle.sh
    JRubyTruffleEnterprise:
        path: implementations/
        binary: jruby-truffle-e.sh
    JRubyC2:
        path: implementations/
        binary: jruby.sh
    JRubyGraal:
        description: JRuby, without Truffle, running with a JVM that uses Graal as top-tier compiler
        path: implementations/
        binary: jruby-graal.sh
    MRI22:
        path: implementations/
        binary: mri-22.sh

    # JavaScript VMs
    # TODO

    # Other systems
    C:
        path: implementations/
        binary: c.sh
# TODO: JS, C, C++

experiments:
    steady-java:
        description: Measure steady state performance
        benchmark: steady-java
        executions:
            - Java7
            - Java8
            - GraalBasic
            - GraalEnterprise
    steady-som:
        executions:
            - SOMns:
                benchmark: steady-somns
            - TruffleSOM:
                benchmark: steady-som
    steady-ruby:
        benchmark: steady-ruby
        executions:
            - JRubyTruffle
            - JRubyTruffleEnterprise
            - JRubyC2
            - JRubyGraal
            - MRI22
        
                


